plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id "me.modmuss50.mod-publish-plugin" version "0.3.0"
}

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}

// Github Stuff
def ENV = System.getenv()
version = "${ENV.GITHUB_RUN_NUMBER}" ? "${mod_version}.${ENV.GITHUB_RUN_NUMBER}" : "${mod_version}.nobuildnumber"
group = "net.manmaed.petrock" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
base {
    archivesBaseName = "petrock"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: "${minecraft_mappings}", version: "${minecraft_version}"
    copyIdeResources = true
    runs {
        client {
            workingDirectory project.file('run/c')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                petrock  {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/s')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                petrock  {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'petrock', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                petrock  {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {
    maven { url 'https://maven.blamejared.com' }
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${minecraft_version}-${patchouli_version}")
    //runtimeOnly fg.deobf("curse.maven:CP-267193:3915811")
    //implementation fg.deobf("curse.maven:${tk_slug}-${tk_pid}:${tk_fid}")
//    implementation fg.deobf("curse.maven:${pat_slug}-${pat_pid}:${pat_fid}")
//    compile fg.deobf("curse.maven:TOP-245211:3157997") //The One Probe
//    compile fg.deobf("curse.maven:JEI-238222:3414898") //Just Enough Items
//    compile fg.deobf("curse.maven:BS-228525:3411543") //Bookshelf
//    compile fg.deobf("curse.maven:BP-353928:3283196") //Botany Pots
//    compile fg.deobf("curse.maven:CL-272335:3349690") //Cucumber Library
//    compile fg.deobf("curse.maven:MA-246640:3398788") //Mystical Agriculture
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": "petrock",
                "Specification-Vendor": "manmaed",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"manmaed",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishMods {
    dryRun = providers.environmentVariable("CURSE_DEPLOY").getOrNull() == null
    file = jar.archiveFile
    modLoaders.add("forge")
    type = BETA
    changelog = "changeme"
    displayName = "${mod_name} v${version} - ${minecraft_version}"
    curseforge {
        accessToken  = providers.environmentVariable("CURSE_DEPLOY")
        projectId = "${curseforge_id}"
        minecraftVersions.add("Java 17")
        minecraftVersions.add("${minecraft_version}")
        optional {
            slug = 'patchouli'
        }
    }
}
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}